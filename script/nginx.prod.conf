user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;

	include /etc/nginx/conf.d/*.conf;

  server {
    listen 80;
    server_name _;

    ## Redirect to app main page
    location = / {
      return 301 /app;
    }


    ## These routes must be unprotected to allow logins

    location /auth/ {
      proxy_pass http://localhost:5001;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /login {

      alias /var/www/front-login;
      try_files $uri $uri/ /index.html;
    }

    ## Remaining routes should be protected
    location /app {

      # /app/ requests should redirect to login if not authorized.
      auth_request /auth_check;

      error_page 401 = @auth_failed;

      alias /var/www/front-main/;
      try_files $uri $uri/ /index.html;
    }


    location @auth_failed {
      # Define the URL where you want to redirect the client when authentication fails.
      add_header Cache-Control "no-cache, no-store, must-revalidate";
      add_header Pragma "no-cache";
      add_header Expires 0;
      return 301 /login;
    }

    location /api/ {
      # api requests should just fail if not authorized.
      auth_request /auth_check;

      proxy_pass http://localhost:5000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    location = /auth_check {
      internal;
      proxy_pass http://localhost:5001/auth/test;
    }

  }
}

